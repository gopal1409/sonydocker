Dependencies
1. Django v3.2.6
2. Docker v20.10.8
3. Python v3.9.6
We will install the python 3.9.6 version
 423  apt install software-properties-common
  424  add-apt-repository ppa:deadsnakes/ppa
  425  apt update
  426  apt install python 3.9
  427  python3.9
then press ctr d to come out of the python promopt
then we will install pip utility in python
 431  apt install python3-pip
  436  pip install virtualenv
  we need to install docker-compose
   439  sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  440  sudo chmod +x /usr/local/bin/docker-compose
  441  sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
  
  Project Setup
  Create a new Project Directory with a new Django Project
  445  mkdir django-on-docker
  446  cd django-on-docker/
  447  mkdir app && cd app
  448  apt install tree
  449  python3.9 -m venv env
  450  source env/bin/activate
  451  pip install django==3.2.6
  452  python3.9 -m pip install --upgrade pip
  453  django-admin.py startproject hello_django .
  454  python manage.py migrate
  455  python manage.py runserver
create a requirement.txt file and we will put Django as Depndencies. 
466  vi requirements.txt
#inside this file 
Django==3.2.6

inside the app directory we will create a docker file
vi dockerfile

#pull the offcial base image of python
FROM python:3.9.6-alpine
#set the working directory
WORKDIR /usr/src/app

#set the environment variable
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
#install dependencies

RUN pip install --upgrade pip
COPY ./requirements.txt .
RUN pip install -r requirements.txt

#copy the project
COPY . .
creat the docker-compose.yml

 vi docker-compose.yml
 
 version: '3.8'
services:
  web:
    build: ./app
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./app/:/usr/src/app/
    ports:
      - 8000:8000
    env_file:
      - ./.env.dev

then create the env file
vi .env.dev
DEBUG=1
SECRET_KEY=foo
DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]

go to this directory
cd /app/hello_django
vi settings.py
# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'django-insecure-2z_3#*21$lyhrxj5=qs%dxct)4x-bbi+k8ne)8txsw0z*af#$8'
SECRET_KEY = os.environ.get("SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = True
DEBUG = int(os.environ.get("DEBUG",default=0))
#ALLOWED_HOSTS = []
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split(" ")

once updated setting.py
do cd ..
do cd ..
then if you do ls
it will show you docker-compose.yml file and an app directory

finally build it and run the app using docker-compsoe command
 496  docker-compose build
  497  docker-compose up -d
  
  we will update the docker compose file with database
  vi docker-compose.yml
version: '3.8'
services:
  web:
    build: ./app
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./app/:/usr/src/app/
    ports:
      - 8000:8000
    env_file:
      - ./.env.dev
    depends_on:
      - db
  db:
    image: postgres:13.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=hello_django
      - POSTGRES_PASSWORD=hello_django
      - POSTGRES_DB=hello_django_dev
volumes:
  postgres_data:

then we will modify the environment varaible
vi .env.dev
DEBUG=1
SECRET_KEY=foo
DJANGO_ALLOWED_HOSTS=localhost 18.188.214.57 [::1]
SQL_ENGINE=django.db.backends.postgresql
SQL_DATABASE=hello_django_dev
SQL_USER=hello_django
SQL_PASSWORD=hello_django
SQL_HOST=db
SQL_PORT=5432

finally modify the seeting.py in database column
cd /app/hello_django/
vi settings.py
DATABASES = {
    'default': {
     #   'ENGINE': 'django.db.backends.sqlite3',
      #'NAME': BASE_DIR / 'db.sqlite3',
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("SQL_DATABASE", BASE_DIR / "db.sqlite3"),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
        "HOST": os.environ.get("SQL_HOST", "localhost"),
        "PORT": os.environ.get("SQL_PORT", "5432"),
    }
}

we need to upgrade the requirement.txt file to install postgree driver
cd ..
vi requirements.txt
Django==3.2.6
psycopg2-binary==2.9.1

then we need to upgrade the docker file also
we need to install psycopg2 dependencies
vi dockerfile

#pull the offcial base image of python
FROM python:3.9.6-alpine
#set the working directory
WORKDIR /usr/src/app

#set the environment variable
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

#install psycopg2 dependencies
RUN apk update \
    && apk add postgresql-dev gcc python3-dev musl-dev
#install dependencies

RUN pip install --upgrade pip
COPY ./requirements.txt .
RUN pip install -r requirements.txt

#copy the project
COPY . .





