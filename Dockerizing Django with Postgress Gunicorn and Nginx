Dependencies
1. Django v3.2.6
2. Docker v20.10.8
3. Python v3.9.6
We will install the python 3.9.6 version
 423  apt install software-properties-common
  424  add-apt-repository ppa:deadsnakes/ppa
  425  apt update
  426  apt install python 3.9
  427  python3.9
then press ctr d to come out of the python promopt
then we will install pip utility in python
 431  apt install python3-pip
  436  pip install virtualenv
  we need to install docker-compose
   439  sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  440  sudo chmod +x /usr/local/bin/docker-compose
  441  sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
  
  Project Setup
  Create a new Project Directory with a new Django Project
  445  mkdir django-on-docker
  446  cd django-on-docker/
  447  mkdir app && cd app
  448  apt install tree
  449  python3.9 -m venv env
  450  source env/bin/activate
  451  pip install django==3.2.6
  452  python3.9 -m pip install --upgrade pip
  453  django-admin.py startproject hello_django .
  454  python manage.py migrate
  455  python manage.py runserver
create a requirement.txt file and we will put Django as Depndencies. 
466  vi requirements.txt
#inside this file 
Django==3.2.6

inside the app directory we will create a docker file
vi dockerfile

#pull the offcial base image of python
FROM python:3.9.6-alpine
#set the working directory
WORKDIR /usr/src/app

#set the environment variable
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
#install dependencies

RUN pip install --upgrade pip
COPY ./requirements.txt .
RUN pip install -r requirements.txt

#copy the project
COPY . .
creat the docker-compose.yml

 vi docker-compose.yml
 
 version: '3.8'
services:
  web:
    build: ./app
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./app/:/usr/src/app/
    ports:
      - 8000:8000
    env_file:
      - ./.env.dev

then create the env file
vi .env.dev
DEBUG=1
SECRET_KEY=foo
DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]

go to this directory
cd /app/hello_django
vi settings.py
# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'django-insecure-2z_3#*21$lyhrxj5=qs%dxct)4x-bbi+k8ne)8txsw0z*af#$8'
SECRET_KEY = os.environ.get("SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = True
DEBUG = int(os.environ.get("DEBUG",default=0))
#ALLOWED_HOSTS = []
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split(" ")

once updated setting.py
do cd ..
do cd ..
then if you do ls
it will show you docker-compose.yml file and an app directory

finally build it and run the app using docker-compsoe command
 496  docker-compose build
  497  docker-compose up -d
  
  we will update the docker compose file with database
  vi docker-compose.yml
version: '3.8'
services:
  web:
    build: ./app
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./app/:/usr/src/app/
    ports:
      - 8000:8000
    env_file:
      - ./.env.dev
    depends_on:
      - db
  db:
    image: postgres:13.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=hello_django
      - POSTGRES_PASSWORD=hello_django
      - POSTGRES_DB=hello_django_dev
volumes:
  postgres_data:

then we will modify the environment varaible
vi .env.dev
DEBUG=1
SECRET_KEY=foo
DJANGO_ALLOWED_HOSTS=localhost 18.188.214.57 [::1]
SQL_ENGINE=django.db.backends.postgresql
SQL_DATABASE=hello_django_dev
SQL_USER=hello_django
SQL_PASSWORD=hello_django
SQL_HOST=db
SQL_PORT=5432

finally modify the seeting.py in database column
cd /app/hello_django/
vi settings.py
DATABASES = {
    'default': {
     #   'ENGINE': 'django.db.backends.sqlite3',
      #'NAME': BASE_DIR / 'db.sqlite3',
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("SQL_DATABASE", BASE_DIR / "db.sqlite3"),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
        "HOST": os.environ.get("SQL_HOST", "localhost"),
        "PORT": os.environ.get("SQL_PORT", "5432"),
    }
}

we need to upgrade the requirement.txt file to install postgree driver
cd ..
vi requirements.txt
Django==3.2.6
psycopg2-binary==2.9.1

then we need to upgrade the docker file also
we need to install psycopg2 dependencies
vi dockerfile

#pull the offcial base image of python
FROM python:3.9.6-alpine
#set the working directory
WORKDIR /usr/src/app

#set the environment variable
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

#install psycopg2 dependencies
RUN apk update \
    && apk add postgresql-dev gcc python3-dev musl-dev
#install dependencies

RUN pip install --upgrade pip
COPY ./requirements.txt .
RUN pip install -r requirements.txt

#copy the project
COPY . .



next we will build the image with postgress
 552  docker-compose build
  553  docker-compose up -d
  554  docker ps
  Run the migration
  555  docker-compose exec web python manage.py migrate --noinput
  Ensure the default Django table is created
  556  docker-compose exec db psql --username=hello_django --dbname=hello_django_dev
  once you login to the database. 
  \l
  \c hello_django_dev
  \dt
  \q

But before we apply the migration I want to check the helth of the database. 
to do the same we will create an entrypoint.sh and check the health of db before i migrate. 
cd /app
 vi entrypoint.sh
 #!/bin/sh

if [ "$DATABASE" = "postgres" ]
then
    echo "Waiting for postgres..."

    while ! nc -z $SQL_HOST $SQL_PORT; do
      sleep 0.1
    done

    echo "PostgreSQL started"
fi

python manage.py flush --no-input
python manage.py migrate

exec "$@"

chmod +x entrypoint.sh

then we will again need to modify the docker file to inslude this entry point
vi dockerfile

#pull the offcial base image of python
FROM python:3.9.6-alpine
#set the working directory
WORKDIR /usr/src/app

#set the environment variable
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

#install psycopg2 dependencies
RUN apk update \
    && apk add postgresql-dev gcc python3-dev musl-dev
#install dependencies

RUN pip install --upgrade pip
COPY ./entrypoint.sh .
RUN sed -i 's/\r$//g' /usr/src/app/entrypoint.sh
RUN chmod +x /usr/src/app/entrypoint.sh
COPY ./requirements.txt .
RUN pip install -r requirements.txt

#copy the project
COPY . .
#we need to run the entrypoint.sh
ENTRYPOINT ["/usr/src/app/entrypoint.sh"]

then you need to do cd ..
vi .env.dev
DEBUG=1
SECRET_KEY=foo
DJANGO_ALLOWED_HOSTS=localhost 18.188.214.57 [::1]
SQL_ENGINE=django.db.backends.postgresql
SQL_DATABASE=hello_django_dev
SQL_USER=hello_django
SQL_PASSWORD=hello_django
SQL_HOST=db
SQL_PORT=5432
DATABASE=postgres

i want to rebuild the django image frequently withought compiling my database. and run it
587  docker build -f ./app/dockerfile -t hello_dejango:latest ./app
  588  docker run -d -p 8006:8000 -e "SECRET_KEY=test" -e "DEBUG=1" -e "DJANGO_ALLOWED_HOSTS=*" hello_dejango python /usr/src/app/manage.py runserver 0.0.0.0:8000
    590  docker ps
  591  docker stop 3fc
  
  second you may want to comment out the database flush and migrate command in the entry point.sh so that they should not run on every start or restart


 599  cd app
  600  vi entrypoint.sh
#!/bin/sh

if [ "$DATABASE" = "postgres" ]
then
    echo "Waiting for postgres..."

    while ! nc -z $SQL_HOST $SQL_PORT; do
      sleep 0.1
    done

    echo "PostgreSQL started"
fi

#python manage.py flush --no-input
#python manage.py migrate

exec "$@"

603  cd ..
  604  docker-compose build
  605  docker-compose up -d
  606  docker ps
after i comment the flush and migration. 
then build my container and started the contianer i want to execute flush and migration

609  docker-compose exec web python manage.py flush --no-input
  610  docker-compose exec web python manage.py migrate
  
  Gunicorn
  we want to create an production Environment . to do the same lets add Gunicor. which will give me an WSGI server. 
  612  cd app
  613  vi requirements.txt
  Django==3.2.6
gunicorn==20.1.0
psycopg2-binary==2.9.
  614  cd ..
till know we work on a development environment now we want to create a prod environment with Gunicorn that also withought disturbing the existing environment. 
 
622  cp docker-compose.yml docker-compose.prod.yml
  623  ls
  624  vi docker-compose.prod.yml
version: '3.8'
services:
  web:
    build: ./app
    command: gunicorn hello_django.wsgi:application --bind 0.0.0.0:8000
    ports:
     - 8000:8000
    env_file:
      - ./.env.prod
    depends_on:
      - db
  db:
    image: postgres:13.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.env.prod.db
volumes:
  postgres_data:

create the prod file
vi .env.prod
DEBUG=1
SECRET_KEY=change_me
DJANGO_ALLOWED_HOSTS=localhost 18.188.214.57 [::1]
SQL_ENGINE=django.db.backends.postgresql
SQL_DATABASE=hello_django_prod
SQL_USER=hello_django
SQL_PASSWORD=hello_django
SQL_HOST=db
SQL_PORT=5432
DATABASE=postgres

vi .env.prod.db
POSTGRES_USER=hello_django
POSTGRES_PASSWORD=hello_django
POSTGRES_DB=hello_django_prod

docker-compose down
640  docker-compose -f docker-compose.prod.yml up -d --build

For production environment the entrypoint will be different and dockerfile also need to be changed. 
cd app
 646  cp entrypoint.sh entrypoint.prod.sh
vi dockerfile.prod
###########
# BUILDER #
###########

# pull official base image
FROM python:3.9.6-alpine as builder

# set work directory
WORKDIR /usr/src/app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install psycopg2 dependencies
RUN apk update \
    && apk add postgresql-dev gcc python3-dev musl-dev

# lint
RUN pip install --upgrade pip
RUN pip install flake8==3.9.2
COPY . .
RUN flake8 --ignore=E501,F401 .

# install dependencies
COPY ./requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt


#########
# FINAL #
#########

# pull official base image
FROM python:3.9.6-alpine

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
RUN addgroup -S app && adduser -S app -G app

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
WORKDIR $APP_HOME

# install dependencies
RUN apk update && apk add libpq
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.txt .
RUN pip install --no-cache /wheels/*

# copy entrypoint.prod.sh
COPY ./entrypoint.prod.sh .
RUN sed -i 's/\r$//g'  $APP_HOME/entrypoint.prod.sh
RUN chmod +x  $APP_HOME/entrypoint.prod.sh

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app

# run entrypoint.prod.sh
ENTRYPOINT ["/home/app/web/entrypoint.prod.sh"]

Now we need to modify the docker-compose.prod file to use thsi new docker file and entrpoint file
660  cd ..
  661  vi docker-compose.prod.yml
version: '3.8'
services:
  web:
    build: ./app
    dockerfile: docker.prod
    command: gunicorn hello_django.wsgi:application --bind 0.0.0.0:8000
    ports:
     - 8000:8000
    env_file:
      - ./.env.prod
    depends_on:
      - db
  db:
    image: postgres:13.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.env.prod.db
volumes:
  postgres_data:

